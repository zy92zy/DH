import Battle from "../../../game/battle/Battle";
import BattleRole from "../../../game/battle/BattleRole";
import SKDataUtil from "../../../gear/SKDataUtil";
import { EActionOn, EActionType, EAttrTypeL1, EBuffType, EMagicType, ESkillQuality } from "../../role/EEnum";
import Buff from "./Buff";

export default class SkillBase {
	/** BUFF名称 */
    static magicName: any;
    static skillEffect: any = {
        /**  人数 */
        cnt: 1, 
        /**  回合 */
        round: 0, 
        /** 伤害 */
        hurt: 0, 
        /** 伤害百分比 */
        hurtpre: 0, 
        /**  加血百分比 */
        hppre: 0, 
        /**  加蓝百分比 */
        mppre: 0, 
        /**  法力减少- */
        smppre: 0, 
        /**  命中增加+ */
        hit: 0, 
        /**  速度增加+ */
        spd: 0, 
        /**  攻击增加+ */
        atk: 0, 
        /**  控制抗性+ */
        kongzhi: 0, 
        /**  法伤抗性+ */
        fashang: 0, 
        /**  防御+ */
        fangyu: 0, 
        /**  增加血量 */
        hp: 0, 
        /**  智能回血（用于吸血类技能） */
        aihp: 0, 
        /**  减少控制抗性 */
        skongzhi: 0, 
        /**  隐身 */
        yinshen: 0, 
        /** 五行 */
        attrtype: 0, 
        /** 五行数值 */
        attrnum: 0, 
        /** mp消耗比例 */
        curmp: 1,
    }

    skill_id: number;
    skill_name: string;
    /** 默认物理类型 */
    skill_type: number; 
    action_type: number;
    skill_data: any;
    buff_type: number;
    effectDesc: string;
    effectMap: { [key: number]: object } = {};
    /**  技能类型 */
    kind: number; 
    /** 技能 品质 */
    quality: number;
    /**  技能冷却时间 */
    cooldown: number;
    /**  技能回合限制 前几回合不能用 */
    limit_round: number; 
    /**  技能限制使用次数 */
    limit_times: number;
    /**  技能作用于 0 all 1 敌人 2 自己人 */
    act_on: number;
    /**  经验值 */
    exp: number = 0;
    /**  最大经验值 */
    expMax: number = 20000;


    constructor() {
        this.skill_id = 0;
        this.skill_name = '未知技能';
        /** 默认物理类型 */
        this.skill_type = EMagicType.NONE;   
        this.action_type = EActionType.INITIATIVE;
        this.skill_data = null;
        this.buff_type = EBuffType.NONE;
        this.effectMap = {};
        /**  技能类型 */
        this.kind = 0; 
        /** 技能 品质 */
        this.quality = 0; 
        /**  技能冷却时间 */
        this.cooldown = 0; 
        /**  技能回合限制 前几回合不能用 */
        this.limit_round = 0; 
        /**  技能限制使用次数 */
        this.limit_times = 0;
        /**  技能作用于 0 all 1 敌人 2 自己人 */
        this.act_on = EActionOn.ENEMY;
    }

    setSkillData(data: any) {
        this.skill_data = data;
    }

   /**  使用技能 */
    useSkill(brole: any): string {
        let profic = brole.getSkillProfic(this.skill_id);
        let submp = 0;
        if (this.quality == ESkillQuality.LOW) {
            submp = profic * 0.013;
        } else if (this.quality == ESkillQuality.HIGH) {
            submp = profic * 0.042;
        }
        let curmp = brole.getAttr(EAttrTypeL1.MP) || 0;
        let buff;
        if(buff = brole.getBuffByEffect(EMagicType.ZhenJiEff)){
            submp *= buff._data;
        }

        if (curmp - submp < 0) {
            return `[${this.skill_name}]法力不足，无法释放`;
        }
        brole.subMP(-submp)
        return "";
    }
   /**  获得技能属性加成 */
    
    getEffect(params: any = null): any {
        let result = SKDataUtil.clone(SkillBase.skillEffect);
        return result;
    }
   /**  获得坐骑技能属性加成 */

    getBaldricEffect(type: EAttrTypeL1): any {
        let ret: any = {};
        let item: any = this.effectMap[type];
        if (item) {
            if (item.add) {
                ret.add = SKDataUtil.toDecimal2(item.add);
                if (item.grade == null) {
                    ret.add = SKDataUtil.toDecimal2(ret.add);
                }
            }
        }
        return ret;
    }

    getTagerCount(){
        return 1
    }
    checkEffect(battleRole: BattleRole, round: number){}
    /**战斗计算 */
    checkBattle(battleRole: BattleRole, battle:Battle, round: number) {}


   /**  获得坐骑技能属性加成 */
    
    getHorseEffect(type: EAttrTypeL1, level: number, exp: number): any {
        let prop: number = Math.max(level * 0.05 + exp * 0.00025, 1);
        let ret: any = {};
        let item: any = this.effectMap[type];
        if (item) {
            if (item.add) {
                ret.add = SKDataUtil.toDecimal2(item.add);
                if (item.grade == null) {
                    ret.add = SKDataUtil.toDecimal2(ret.add * prop);
                }
            }
        }
        return ret;
    }

    toObj(): any {
        let result = {
            skill_id: this.skill_id,
            exp: this.exp
        }
        return result;
    }

    battle(battleRole: BattleRole, plist: BattleRole[], round: number, battle_type: number){}

    battleBuff(param: any, buff: Buff){


    }


    /** 升级需要消费的银两 
    getExpPrice() { 
        let level = Math.floor(this.curExp / 100);
        let price = 0;
        let levelprice = SkillBase.skillConsume[level];
        if (levelprice) {
            price = levelprice[this.scale];
        }
        return price;
    }*/
    
   /** 升级消耗 */
   static skillConsume = [
    [1422, 6434],
    [1725, 6740],
    [2031, 7050],
    [2338, 7365],
    [2648, 7684],
    [2961, 8007],
    [3275, 8334],
    [3592, 8665],
    [3911, 9000],
    [4232, 9340],
    [4555, 9684],
    [4881, 10032],
    [5208, 10384],
    [5538, 10740],
    [5871, 11100],
    [6205, 11465],
    [6542, 11834],
    [6881, 12207],
    [7222, 12584],
    [7565, 12965],
    [7911, 13350],
    [8258, 13740],
    [8608, 14134],
    [8961, 14532],
    [9315, 14934],
    [9672, 15340],
    [10031, 15750],
    [10392, 16165],
    [10755, 16584],
    [11121, 17007],
    [11488, 17434],
    [11858, 17865],
    [12231, 18300],
    [12605, 18740],
    [12982, 19184],
    [13361, 19632],
    [13742, 20084],
    [14125, 20540],
    [14511, 21000],
    [14898, 21465],
    [15288, 21934],
    [15681, 22407],
    [16075, 22884],
    [16472, 23365],
    [16871, 23850],
    [17272, 24340],
    [17675, 24834],
    [18081, 25332],
    [18488, 25834],
    [18898, 26340],
    [32358, 51314],
    [33353, 52918],
    [34365, 54553],
    [35393, 56218],
    [36438, 57914],
    [37499, 59640],
    [38576, 61398],
    [39670, 63187],
    [40780, 65006],
    [41908, 66857],
    [43052, 68740],
    [44212, 70653],
    [45390, 72599],
    [46584, 74576],
    [47795, 76584],
    [49024, 78625],
    [50269, 80697],
    [51531, 82802],
    [52811, 84938],
    [54107, 87107],
    [55421, 89308],
    [56753, 91542],
    [58101, 93808],
    [59467, 96106],
    [60850, 98438],
    [62251, 100802],
    [63670, 103199],
    [65106, 105628],
    [66559, 108091],
    [68030, 110587],
    [69519, 113116],
    [71026, 115679],
    [72550, 118274],
    [74092, 120904],
    [75652, 123566],
    [77230, 126263],
    [78826, 128993],
    [80440, 131756],
    [82072, 134554],
    [83723, 137385],
    [85391, 140251],
    [87077, 143150],
    [88782, 146084],
    [90505, 149052],
    [92246, 152054],
    [94005, 155090],
    [95783, 158161],
    [97579, 161266],
    [99394, 164406],
    [101227, 167581],
    [317122, 572122],
    [324114, 584970],
    [331195, 597984],
    [338366, 611167],
    [345626, 624517],
    [352977, 638037],
    [360418, 651726],
    [367949, 665585],
    [375571, 679615],
    [383285, 693815],
    [391090, 708188],
    [398988, 722732],
    [406977, 737449],
    [415058, 752340],
    [423233, 767404],
    [431500, 782643],
    [439861, 798057],
    [448315, 813646],
    [456863, 829410],
    [465505, 845352],
    [474241, 861470],
    [483072, 877766],
    [491998, 894240],
    [501019, 910892],
    [510136, 927723],
    [519348, 944734],
    [528657, 961925],
    [538062, 979296],
    [547563, 996848],
    [557161, 1014582],
    [566856, 1032498],
    [576648, 1050596],
    [586538, 1068877],
    [596526, 1087342],
    [606612, 1105990],
    [616796, 1124823],
    [627079, 1143841],
    [637461, 1163044],
    [647942, 1182433],
    [658522, 1202009],
    [669202, 1221771],
    [679981, 1241720],
    [690861, 1261857],
    [701841, 1282183],
    [712922, 1302696],
    [724103, 1323399],
    [735386, 1344292],
    [746770, 1365374],
    [758255, 1386647],
    [769843, 1408111],
    [781532, 1429766],
    [793324, 1451613],
    [805218, 1473652],
    [817215, 1495884],
    [829315, 1518308],
    [841518, 1540927],
    [853825, 1563739],
    [866235, 1586746],
    [878749, 1609948],
    [891367, 1633345],
    [904090, 1656937],
    [916918, 1680726],
    [929850, 1704711],
    [942887, 1728893],
    [956029, 1753273],
    [969277, 1777851],
    [982631, 1802626],
    [996091, 1827601],
    [1009657, 1852774],
    [1023329, 1878147],
    [1037108, 1903720],
    [1050994, 1929493],
    [1064986, 1955467],
    [1079086, 1981642],
    [1093294, 2008019],
    [1107609, 2034598],
    [1122032, 2061378],
    [1136563, 2088362],
    [1151203, 2115549],
    [1165951, 2142939],
    [1180808, 2170533],
    [1195774, 2198332],
    [1210849, 2226335],
    [1226034, 2254544],
    [1241328, 2282958],
    [1256732, 2311577],
    [1272246, 2340404],
    [1287870, 2369436],
    [1303604, 2398676],
    [1319450, 2428124],
    [1335406, 2457779],
    [1351473, 2487642],
    [1367651, 2517714],
    [1383941, 2547995],
    [1400343, 2578486],
    [1416856, 2609186],
    [1433482, 2640096],
    [1450219, 2671217],
    [1467069, 2702548],
    [1484032, 2734091],
    [1501108, 2765846],
    [1518297, 2797812],
    [1535599, 2829991],
    [1553014, 2862382],
    [1570543, 2894986],
    [1588186, 2927804],
    [1605943, 2960836],
    [1623814, 2994082],
    [1641800, 3027542],
    [1659900, 3061218],
    [1678115, 3095108],
    [1696445, 3129214],
    [1714890, 3163537],
    [1733450, 3198075],
    [1752126, 3232830],
    [1770918, 3267802],
    [1789826, 3302992],
    [1808850, 3338399],
    [1827990, 3374024],
    [1847247, 3409868],
    [1866620, 3445931],
    [1886110, 3482212],
    [1905718, 3518713],
    [1925442, 3555434],
    [1945284, 3592376],
    [1965244, 3629537],
    [1985321, 3666920],
    [2005516, 3704523],
    [2025830, 3742349],
    [2046261, 3780396],
    [2066812, 3818665],
    [2087481, 3857157],
    [2108269, 3895872],
    [2129175, 3934809],
    [2150202, 3973971],
    [2171347, 4013356],
    [2192612, 4052966],
    [2213997, 4092800],
    [2235502, 4132859],
    [2257127, 4173144],
    [2278872, 4213653],
    [2300738, 4254389],
    [2322724, 4295351],
    [2344831, 4336539],
    [2367060, 4377955],
    [2389409, 4419597],
    [2411879, 4461467],
    [2434472, 4503565],
    [2457185, 4545891],
    [2480021, 4588445]
];
}